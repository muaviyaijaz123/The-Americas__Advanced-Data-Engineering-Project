pipeline CountriesEconomyPipeline{
     CountriesEconomyExtractor
        -> CountriesEconomyTextXLSXInterpreter
        -> CountriesEconomyCellsSheetpicker
        -> CountriesEconomyCellsSelector
        -> CountriesEconomyHeaderWriter;

        CountriesEconomyHeaderWriter
        -> BondIssuanceTableInterpreter
        -> BondIssuanceLoader;

        CountriesEconomyHeaderWriter
        -> GDPCapitaTableInterpreter
        -> GDPCapitaLoader;


    block CountriesEconomyExtractor oftype HttpExtractor{
            url: "https://thedocs.worldbank.org/en/doc/7d852628d96b9411d43e5d36d5dff941-0050062022/original/Graphs-Chapter-5-02082022.xlsx";
    }

    block CountriesEconomyTextXLSXInterpreter oftype XLSXInterpreter { }

    block CountriesEconomyCellsSheetpicker oftype SheetPicker {
            sheetName: 'Figure S5.1.2';
    }

    block CountriesEconomyCellsSelector oftype CellRangeSelector{
    select : range P2:S45 ;
    }

    block CountriesEconomyHeaderWriter oftype CellWriter{
        at: range A1:D1 ;
        write:[
            "Country Code",
            "Economy",
            "GDP per Capita",
            "Bond Issuance Share",
        ];
    }

    block BondIssuanceTableInterpreter oftype TableInterpreter{
        header: true;
        columns: [
            "Country Code" oftype CountryCodeAlpha3,
            "Bond Issuance Share" oftype BondIssuanceShare,
        ];
    }

    block BondIssuanceLoader oftype SQLiteLoader{
        table: "bondIssuance";
        file: "./country-stats.sqlite";
    }

    block GDPCapitaTableInterpreter oftype TableInterpreter{
        header: true;
        columns: [
            "Country Code" oftype CountryCodeAlpha3,
            "GDP per Capita" oftype GDPCapita,
        ];
    }

    block GDPCapitaLoader oftype SQLiteLoader{
        table: "gdpPerCapita";
        file: "./country-stats.sqlite";
    }

    valuetype Alpha3Country oftype text{
        constraints: [
            CountryCodeNotEmptyConstraint,
        ];
    }

    valuetype GDPCapita oftype decimal{
        constraints: [
            PositiveDecimalConstraint
        ];
    }

    valuetype BondIssuanceShare oftype decimal{
        constraints: [
            BondIssuanceLowerUpperLimitConstraint
        ];
    }

    constraint CountryCodeNotEmptyConstraint on text: value.length != 0;

    constraint PositiveDecimalConstraint on decimal: value > 0;

    constraint BondIssuanceLowerUpperLimitConstraint oftype RangeConstraint {
        lowerBound: 0;
        lowerBoundInclusive: true;
        upperBound: 1;
        upperBoundInclusive: true;
    }
}